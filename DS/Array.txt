1. Find all the triplet with sum =0;

class Solution {
    public List<List<Integer>> threeSum(int[] arr) {
        List<List<Integer>> ans = new ArrayList<>();
        int n = arr.length;
        Arrays.sort(arr);
        for(int i=0;i<n;i++){
            if(i!=0 && arr[i]==arr[i-1])continue;
            int j=i+1;
            int k=n-1;
           while(j<k){
            int sum = arr[i]+arr[j]+arr[k];
            if(sum<0)j++;
            else if(sum>0)k--;
            else{
                List<Integer> temp = Arrays.asList(arr[i],arr[j],arr[k]);
                ans.add(temp);
                j++;k--;
                //skip the duplicates
                while(j<k && arr[j]==arr[j-1])j++;
                while(j<k && arr[k]==arr[k+1])k--;
            }
           } 
        }
    return ans;    
    }
}

Time Complexity: O(NlogN)+O(N2), where N = size of the array.
Space Complexity: O(no. of quadruplets), This space is only used to store the answer. We are not using any extra space to solve this problem. So, from that perspective, space complexity can be written as O(1).
